Python FAQ: Web开发
======================

原文： `Python FAQ: Webdev <http://me.veekun.com/blog/2012/05/05/python-faq-webdev/>`_

译者： `youngsterxyf <http://xiayf.blogspot.com/>`_

`Python FAQ <http://me.veekun.com/blog/2011/07/22/python-faq/>`_ 的一部分

**我只会PHP，那该怎么用Python来编写一个Web应用呢？**

这是一个相当复杂的问题，甚至很容易就能写一本书来探讨Web开发与Python，
以及如何关联两者，所以我很想先把这个问题放一放。但是鉴于我刚 `相当粗暴地捣毁了PHP <http://me.veekun.com/blog/2012/04/09/php-a-fractal-of-bad-design/>`_ ，明智些，还是回答这个问题吧，宜早不宜迟。

最直接简单的答案是：不要再读了，马上使用 `Flask <http://flask.pocoo.org/>`_ 着手构建一样东西。然而，我觉得还有更好回答。

本文并非是教程。也许将来我会写一篇，但现在已经存在大量的教程了，我认为你可以阅读那些文档。相反，本文是为新手而写的Python Web开发相关事情的概览。

------

起步
------

显然，你需要安装Python。确保使用Python 2，而不是3。Python 3有一些向后不兼容的改变，并非所有的库都更新过。

安装Python库，可以考虑使用 ``pip`` 。(如果你在使用类Unix操作系统，那么可能可以通过系统包管理器安装pip，否则使用 ``easy_install pip`` ) ``pip`` 是一个小巧的Python包管理器，便于安装，删除，升级，以及检查Python库。当然，尽可能使用你的系统包管理器，不行的话就用 ``pip`` 。

可以使用 ``pip install --user ...`` 将Python库安装到你的home目录，但更好的方式是保持库为每个项目局部可用---这样，你就可以为一个项目升级依赖项而不会破坏其他项目的依赖。(或者破坏Python编写的系统软件。我就曾干过这种事。) ``virtualenv`` 使用单个命令就能助你创建一个独立的Python安装环境。

当然，你已计划使用源码控制，对吧？我喜欢 `git <http://www.git-scm.com/>`_ ,  但有聊胜于无，其他的也OK的。

------

框架
------

第一个障碍是如何将你代码与浏览器相关连。PHP中，最简单的方式是安装Apache并将它指向一些文件。Python中，如同更大的PHP项目，一般需要使用Web框架。

框架多半有相似的工作流程：

- 安装，使用 ``pip`` 这样的工具。

- 创建一个项目骨干(skeleton)。

项目骨干的复杂性视情况而定。对于现已不被使用的Pylons，你会得到一大堆诡异的代码，还需要为新的发布版本手动升级。Flask则简单到没有骨干。复杂性适中的是Pyramid，项目骨干仅包括一些通用的样板文件(boilerplate)，这样你就不需要从零开始自己编写了。

- 配置一些东西，比如数据库。

- 启动开发服务器。

一般是一个运行你的应用的终端程序，从而不需要一个专用的HTTP服务器。当你修改了代码，开发服务器就会自动重新装载，并且能输出栈跟踪和其他调试信息。

- 动手干吧！

那么，应该用什么框架呢？虽然有不计其数的可选项，但有一些明显最流行。

我是 `Pyramid <http://www.pylonsproject.org/>`_ 的粉丝，它在极简主义与电池内置的庞然大物之间做出最佳的平衡。虽然它是从两个更老的组织良好的项目衍生而来，但在最近才成为一个竞争者。Pyramid设计良好，文档齐全，相当透明(fairly transparent)。一个简单的应用根本不需要自动生成的样板文件，允许你直接运行项目骨干，并且核心代码库扩展性非常好。有用的插件越来越多。

如果需要更快地上手， `Flask <http://flask.pocoo.org/>`_ 则足够简单了，但是可扩展性非常良好。其设计上与众不同地做了一些相当的合理的事情，且对你没有很多强迫。

`Bottle <http://bottlepy.org/docs/dev/>`_ 类似于Flask，但是更简单：它作为单个文件发布，没有任何依赖。是好是坏全看你自己，但这意味着Bottle中没有什么东西可以和其他框架分享的。我承认对Bottle知道的不是很多，但我曾简单地了解过(gave it a brief shot once)，对它没什么大的牢骚。

另一极端上， `Django <https://www.djangoproject.com/>`_ 是为类内容管理系统和其他富内容网站而设计的巨大怪兽。它有庞大的可插部件生态系统，内置从模板到ORM的各种东西，以及大量文档和社区资源。Django常被认为是与Ruby on Rails等价的Python框架。其缺点是让它做些它不想做的事情会很别扭。("#python"中许多更加愚钝的问题都是由于试图捣鼓Django而产生的)对于首次尝试Web开发来说，Django可能有些重量了。

还有 `web2py <http://www.web2py.com/>`_  。我，额，不太了解它。据说它会在你的模块名字空间内注入变量，这是令人讨厌的，所以如果你在意那些我认为讨厌的东西就不要用它，否则就用吧，随你自己啦。

曾经有一个Apache模块 ``mod_python`` ，本质上类似于 ``mod_perl`` ，但很早就被抛弃了。请 **不要** 使用它。

最后，你也可以完全"手动"编写Python web代码，但那多半是一次令人沮丧的练习。不会更快，不会有什么教育意义，也不会有什么用。不要自找麻烦。

我的建议？如果你只是想折腾捣鼓，那就从Flask入手吧，随你添加东西。如果你有想法要做一个网站，并且想旗开得胜(hit the ground running)，那就使用一个Pyramid脚手架(scaffold)，跟随它的叙述性文档进行开发。

------

路由选择(Routing)
---------------

PHP是根据URL执行一整个文件，Python web应用则倾向"拥有"一整个目录结构(或者甚至是整个域(domain))。因此，将特定的代码连接到特定的代码就更加灵活，这种连接通常是由一个路由选择系统来处理。

路由(routes)是包含可选占位符的URL，就像这样：

::

    /users/{name}
    /companies/{id}/products
    /blog/{year:\d\d\d\d}/{month:\d\d}/{day:\d\d}/{title}

你可以把这样的一个路由绑定到一个函数，那么当你浏览到 ``/users/eevee`` ，那个函数就会被执行，占位符则以 ``dict(name=u'eevee')`` 这样的结构可供使用。

一些框架(比如Pyramid)在这一步上走得更远：不是直接将路由绑定到函数，而是给路由一个名字，然后把名字绑定到函数。需要一点额外的工作，但优点是在你的应用中只需维护一个所有页面的核心列表。你也可以一个路由名和占位符值来生成一个URL---那么，之后，你就可以只在一个地方修改一下就能改变一个URL，而不需要接触其他东西，并且开发过程中打字错误会产生一个错误信息而不是一个404页面。

句法和具体实现会有些不同，但每个框架都是使用这个系统的某个变种。有些有助于创建REST风格的路由或者其他常见模式，或者你可以很容易编写自己的模式。

请求周期
---------
